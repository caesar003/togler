#!/bin/bash

VERSION="__VERSION__"

# {{{ Dynamic Library Loading
# {{{ Determine library path
# Determine the script directory and library paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if we're in development or production environment
if [[ "$SCRIPT_DIR" == */usr/bin ]]; then
	# Production environment: libraries are in /usr/lib/togler/
	LIB_DIR="/usr/lib/togler"
elif [[ -f "$SCRIPT_DIR/lib/helper.sh" ]]; then
	# Development environment: libraries are relative to script
	LIB_DIR="$SCRIPT_DIR/lib"
elif [[ -f "$SCRIPT_DIR/../lib/helper.sh" ]]; then
	# Alternative development structure: libraries are one level up
	LIB_DIR="$SCRIPT_DIR/../lib"
else
	echo "❌ Error: Could not locate togler libraries"
	echo "Expected to find libraries in one of:"
	echo "  - $SCRIPT_DIR/lib/"
	echo "  - $SCRIPT_DIR/../lib/"
	echo "  - /usr/lib/togler/"
	exit 1
fi
# }}}

# {{{ Module sourcing
# Source required modules in dependency order
source_module() {
	local module="$1"
	local module_path="$LIB_DIR/$module"

	if [[ -f "$module_path" ]]; then
		source "$module_path"
	else
		echo "❌ Error: Required module '$module' not found at $module_path"
		exit 1
	fi
}

# Load modules in order (helper first, as others depend on it)
source_module "helper.sh"
source_module "config.sh"
source_module "core.sh"
# }}}
# }}}

# {{{ Entry point
case "$1" in
-v | --version)
	print_version
	;;
-h | --help)
	print_help
	;;
-t | --toggle)
	APP_NAME="$2"
	if [ -z "$APP_NAME" ]; then
		log_error "Application name required for --toggle"
		exit 1
	fi
	toggle
	;;
-a | --add)
	add_app "$2" "$3" "$4"
	;;
-b | --bind)
	bind_key "$2" "$3"
	;;
-l | --list)
	list_bindings
	;;
-d | --delete)
	delete_binding "$2"
	;;
*)
	print_help
	;;
esac
# }}}
