#!/bin/bash

VERSION="__VERSION__"

print_version() {
	echo "togler version $VERSION"
	exit 0
}

print_help() {
	echo "Usage:"
	echo "  togler --version | -v"
	echo "        Show version information"
	echo
	echo "  togler --help | -h"
	echo "        Show this help message"
	echo
	echo "  togler --toggle | -t <app-name>"
	echo "        Toggle visibility of windows for the specified application"
	echo
	echo "  togler --bind | -b [<key>] [<app-name>]"
	echo "        Bind a key combination to toggle the application"
	echo "        Prompts interactively if arguments are not provided"
	echo
	echo "  togler --add | -a [<app-name>] [<shortcut-name>] [<key>]"
	echo "        Create a GNOME shortcut to toggle an application"
	echo "        Prompts interactively for missing arguments"
	echo
	echo "Examples:"
	echo "  togler -t code"
	echo "  togler -b '<Super>c' code"
	echo "  togler -a firefox 'Toggle Firefox' '<Alt>f'"
	exit 0
}

bind_key() {
	local key_binding="$1"
	local app_name="$2"

	# Interactive prompts for missing parameters
	if [ -z "$key_binding" ]; then
		read -rp "üéπ Enter keybinding (e.g., <Alt>f, <Super>Return): " key_binding
		if [ -z "$key_binding" ]; then
			echo "‚ùå Error: Keybinding cannot be empty"
			exit 1
		fi
	fi

	if [ -z "$app_name" ]; then
		read -rp "üì± Enter application name (e.g., firefox, code): " app_name
		if [ -z "$app_name" ]; then
			echo "‚ùå Error: Application name cannot be empty"
			exit 1
		fi
	fi

	# Get existing custom keybindings
	local existing=$(gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings)

	# Check if there are any custom keybindings at all
	if [ "$existing" = "@as []" ]; then
		echo "‚ùå Error: No existing shortcuts found for '$app_name'"
		echo "üí° Use 'togler --add $app_name' to create a new shortcut first"
		exit 1
	fi

	# Find existing binding for this app
	local found_path=""
	local old_binding=""

	# Search through all existing custom keybindings
	for i in {0..50}; do # Check up to 50 slots (should be more than enough)
		local path="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/"

		# Skip if this path doesn't exist in the custom-keybindings array
		if ! echo "$existing" | grep -q "custom$i"; then
			continue
		fi

		# Get the command for this binding
		local command=$(gsettings get "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$path" command 2>/dev/null)

		# Check if this command matches our app (handle both patterns)
		if [[ "$command" == "'toggle-$app_name'" ]] || [[ "$command" == "'togler --toggle $app_name'" ]]; then
			found_path="$path"
			old_binding=$(gsettings get "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$path" binding 2>/dev/null)
			break
		fi
	done

	# If no existing binding found, offer to create one
	if [ -z "$found_path" ]; then
		echo "‚ùå Error: No existing shortcut found for '$app_name'"
		echo "üí° Available options:"
		echo "   1. Use 'togler --add $app_name \"Toggle $app_name\" \"$key_binding\"' to create a new shortcut"
		echo "   2. Check existing shortcuts with: gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings"

		read -rp "ü§î Would you like to create a new shortcut instead? [y/N]: " create_new
		if [[ "$create_new" == "y" || "$create_new" == "Y" ]]; then
			add_app "$app_name" "Toggle $app_name" "$key_binding"
		else
			exit 1
		fi
		return
	fi

	# Update the existing binding
	if gsettings set "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$found_path" binding "$key_binding"; then
		echo "‚úÖ Successfully updated keybinding for '$app_name'"
		echo "   Old binding: $(echo "$old_binding" | tr -d "'")"
		echo "   New binding: $key_binding"
	else
		echo "‚ùå Error: Failed to update keybinding"
		exit 1
	fi
}

toggle() {
	if [ -t 1 ]; then
		echo "ü§î Looks like you're running this from a terminal."
		echo "üí° For best results, assign 'togler -t $APP_NAME' to a keyboard shortcut instead."
		echo
	fi

	if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
		echo "Warning: Wayland detected!"
		echo "togler relies on xdotool, which does not work under Wayland."
		echo "For best results, log in using an X11 session instead."
		exit 1
	fi

	if ! command -v xdotool &>/dev/null; then
		echo "Error: xdotool is not installed. Install it with: sudo apt install -y xdotool"
		exit 1
	fi

	if pgrep -x "$APP_NAME" >/dev/null; then
		active_win_id=$(xdotool getactivewindow 2>/dev/null)
		app_win_ids=$(xdotool search --onlyvisible --class "$APP_NAME" | sort -n)

		if [ -z "$app_win_ids" ]; then
			exit 0
		fi

		win_array=($app_win_ids)
		num_windows=${#win_array[@]}

		if [ $num_windows -eq 1 ]; then
			win_id=${win_array[0]}
			if [ "$win_id" = "$active_win_id" ]; then
				xdotool windowminimize "$win_id"
			else
				xdotool windowactivate "$win_id"
			fi
			exit 0
		fi

		active_app_window=""
		active_index=-1

		for i in "${!win_array[@]}"; do
			if [ "${win_array[$i]}" = "$active_win_id" ]; then
				active_app_window="${win_array[$i]}"
				active_index=$i
				break
			fi
		done

		mkdir -p /tmp/togler 2>/dev/null || true
		state_file="/tmp/togler/${APP_NAME}_state"

		last_action=""
		if [ -f "$state_file" ]; then
			last_action=$(cat "$state_file" 2>/dev/null)
		fi

		if [ $active_index -eq -1 ]; then
			xdotool windowactivate "${win_array[0]}"
			echo "activated_${win_array[0]}" >"$state_file"
		elif [ $active_index -eq $((num_windows - 1)) ]; then
			xdotool windowminimize "$active_app_window"
			echo "minimized_$active_app_window" >"$state_file"
		else
			if [[ "$last_action" == "minimized_"* ]] && [ $active_index -eq $((num_windows - 2)) ]; then
				xdotool windowactivate "${win_array[0]}"
				echo "activated_${win_array[0]}" >"$state_file"
			else
				next_index=$((active_index + 1))
				xdotool windowactivate "${win_array[$next_index]}"
				echo "activated_${win_array[$next_index]}" >"$state_file"
			fi
		fi
	else
		"$APP_NAME" &
	fi
}

add_app() {
	local app_command="$1"
	local shortcut_name="$2"
	local key_binding="$3"

	# Interactive prompts for missing parameters
	if [ -z "$app_command" ]; then
		echo "üõ†  Add new toggleable app"
		read -rp "üëâ Application command (e.g., code, firefox): " app_command
		if [ -z "$app_command" ]; then
			echo "‚ùå Error: Application command cannot be empty"
			exit 1
		fi
	fi

	if [ -z "$shortcut_name" ]; then
		read -rp "üìõ Shortcut name (e.g., Toggle Firefox): " shortcut_name
		if [ -z "$shortcut_name" ]; then
			shortcut_name="Toggle $app_command"
		fi
	fi

	if [ -z "$key_binding" ]; then
		read -rp "üéπ Keybinding (e.g., <Alt>f): " key_binding
		if [ -z "$key_binding" ]; then
			echo "‚ùå Error: Keybinding cannot be empty"
			exit 1
		fi
	fi

	local toggle_script="$HOME/.local/bin/toggle-$app_command"
	mkdir -p "$(dirname "$toggle_script")"

	# Check if script already exists
	if [ -f "$toggle_script" ]; then
		echo "‚ö†Ô∏è  $toggle_script already exists. Overwrite? [y/N]"
		read -r confirm
		if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
			echo "‚ùå Operation cancelled"
			exit 0
		fi
	fi

	# Create the toggle script
	if cat <<EOF >"$toggle_script"; then
#!/bin/bash
togler --toggle $app_command
EOF
		chmod +x "$toggle_script"
		echo "‚úÖ Created: $toggle_script"
	else
		echo "‚ùå Error: Failed to create toggle script"
		exit 1
	fi

	# Get existing custom keybindings
	local existing=$(gsettings get org.gnome.settings-daemon.plugins.media-keys custom-keybindings)

	# Find next available slot
	local new_index=0
	while echo "$existing" | grep -q "custom$new_index"; do
		new_index=$((new_index + 1))
	done

	local new_path="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$new_index/"

	# Update custom-keybindings list
	local updated
	if [ "$existing" = "@as []" ]; then
		updated="['$new_path']"
	else
		updated=$(echo "$existing" | sed 's/]$//')
		updated="$updated, '$new_path']"
	fi

	# Apply the keybinding
	if gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "$updated" &&
		gsettings set "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$new_path" name "$shortcut_name" &&
		gsettings set "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$new_path" command "$toggle_script" &&
		gsettings set "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:$new_path" binding "$key_binding"; then
		echo "üéâ Successfully added GNOME shortcut for '$shortcut_name' with keybinding $key_binding"
		echo "üìé Make sure ~/.local/bin is in your \$PATH"
	else
		echo "‚ùå Error: Failed to create GNOME keybinding"
		exit 1
	fi
}

# ---------------------------
# Entry point
# ---------------------------

case "$1" in
-v | --version)
	print_version
	;;
-h | --help)
	print_help
	;;
-t | --toggle)
	APP_NAME="$2"
	if [ -z "$APP_NAME" ]; then
		echo "Error: Application name required for --toggle"
		exit 1
	fi
	toggle
	;;
-a | --add)
	add_app "$2" "$3" "$4"
	;;
-b | --bind)
	bind_key "$2" "$3"
	;;
*)
	print_help
	;;
esac
